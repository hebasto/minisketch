cmake_minimum_required(VERSION 3.22)

project(minisketch
  VERSION 0.0.1
  DESCRIPTION "A library for BCH-based set reconciliation"
  HOMEPAGE_URL "http://github.com/sipa/minisketch/"
  LANGUAGES CXX
)

if(DEFINED CMAKE_CXX_STANDARD)
  if(CMAKE_CXX_STANDARD EQUAL 98 OR CMAKE_CXX_STANDARD LESS 11)
    message(FATAL_ERROR "This project requires at least C++11")
  endif()
else()
  set(CMAKE_CXX_STANDARD 11)
endif()
set(CMAKE_CXX_STANDARD_REQUIRED ON)
if(NOT DEFINED CMAKE_CXX_EXTENSIONS)
  set(CMAKE_CXX_EXTENSIONS OFF)
endif()

option(MINISKETCH_TESTS "Build tests." ON)
option(MINISKETCH_BENCHMARK "Build benchmark." OFF)

set(supported_fields "2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64")
set(MINISKETCH_FIELDS ${supported_fields} CACHE STRING "Comma-separated list of field sizes to build. Default=all. Available sizes: ${supported_fields}.")
string(REPLACE "," ";" supported_field_list "${supported_fields}")
string(REPLACE "," ";" provided_field_list "${MINISKETCH_FIELDS}")
foreach(field IN LISTS supported_field_list)
  if(NOT field IN_LIST provided_field_list)
    set(have_disabled_fields TRUE)
    add_compile_definitions(DISABLE_FIELD_${field})
  endif()
endforeach()

set(CMAKE_CXX_VISIBILITY_PRESET hidden)
set(CMAKE_VISIBILITY_INLINES_HIDDEN TRUE)

if(MSVC)
  add_compile_options(/Zc:__cplusplus /W4 /wd4060 /wd4065 /wd4100 /wd4127 /wd4146 /wd4244 /wd4267 /wd4310)
else()
  add_compile_options(-Wall)
endif()

if(MINGW)
  add_link_options(-static)
endif()

add_subdirectory(src)

message("\n")
message("minisketch configure summary")
message("============================")
message("Build options:")
message(" - with benchmarks .................... ${MINISKETCH_BENCHMARK}")
message(" - with tests ...,,,,,,,,,............. ${MINISKETCH_TESTS}")
if(HAVE_CLMUL)
  set(clmul_status "TRUE")
else()
  set(clmul_status "FALSE")
endif()
message(" - enable clmul fields ................ ${clmul_status}")
if(HAVE_CLZ)
  set(clz_status "TRUE")
else()
  set(clz_status "FALSE")
endif()
message(" - enable clz builtins ................ ${clz_status}")
message("")
if(CMAKE_CROSSCOMPILING)
  set(cross_status "TRUE, for ${CMAKE_SYSTEM_NAME}, ${CMAKE_SYSTEM_PROCESSOR}")
else()
  set(cross_status "FALSE")
endif()
message("Cross compiling ....................... ${cross_status}")
message("C++ compiler .......................... ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}, ${CMAKE_CXX_COMPILER}")

get_directory_property(compile_options COMPILE_OPTIONS)
string(REPLACE ";" " " compile_options "${compile_options}")
macro(print_flags_per_config config indent dots)
  string(TOUPPER "${config}" config_uppercase)
  string(STRIP "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_${config_uppercase}}" combined_cxx_flags)
  string(STRIP "${combined_cxx_flags} ${compile_options}" combined_cxx_flags)
  message("${indent}" "C++ flags ...........................${dots} ${combined_cxx_flags}")
endmacro()

get_property(is_multi_config GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(is_multi_config)
  list(JOIN CMAKE_CONFIGURATION_TYPES ", " configs)
  message("Available build configurations ........ ${configs}")
  if(CMAKE_GENERATOR MATCHES "Visual Studio")
    set(default_config "Debug")
  else()
    list(GET CMAKE_CONFIGURATION_TYPES 0 default_config)
  endif()
  message("Default build configuration ........... ${default_config}")
  foreach(config IN LISTS CMAKE_CONFIGURATION_TYPES)
    message("'${config}' build configuration:")
    print_flags_per_config("${config}" "  " "")
  endforeach()
else()
  message("Build configuration ................... ${CMAKE_BUILD_TYPE}")
  print_flags_per_config("${CMAKE_BUILD_TYPE}" "" "..")
endif()

if(have_disabled_fields)
message("")
message(WARNING
  "Only compiling in support for field sizes: ${MINISKETCH_FIELDS}\n"
  "This means the library will lack support for other field sizes entirely.")
endif()
message("")
